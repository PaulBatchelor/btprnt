#+TITLE: btprnt
btprnt is a single-header ansi C library for creating
monochrome bitmap images. This is an early work-in-progress.
* Compiling
btprnt is written in a literate style using
[[https://github.com/paulbatchelor/worgle][Worgle]].
You will need that program installed to tangle out the
header file =btprnt.h=. Both the tangling and sample program
can be generated by running "make".

Once =btprnt.h= has been generated, it can be dropped into
any project without the need of Worgle.
* Usage
Defining =BTPRNT_IMPL= before including =btprnt.h= will
include the whole library. This should be done once per
program:

#+BEGIN_SRC c
#define BTPRNT_IMPL
#include "btprnt.h"
/* your code here... */
#+END_SRC

Without =BTPRNT_IMPL=, the program behaves as a normal
header file.

The sample program is a good place to start for seeing how
to use btprnt. It prints some text in a textbox, and writes
a [[https://en.wikipedia.org/wiki/Netpbm_format#PBM_example][PBM file]]
called "out.pbm". Some image viewers like =feh= or
imagemagicks =display= can view this file format natively.

For fonts, btprnt reads from a bitmap tileset, encoded in
the [[https://en.wikipedia.org/wiki/X_BitMap][XBM file format]].
The XBM file format has the advantage of being C code, so
it can be baked into a btprnt program with no modification.
* Documentation
Why not look at the [[./btprnt.org][source itself]]?
It was written in a literate style so that other humans
could read and understand it. If you open it in emacs,
it can be read like an [[https://orgmode.org][org-mode]]
document.

A good place to start would be the section called
"The Top Level Interface", which describes the main
user-facing interface. From there, I would read the
following abstractions in bottoms-up order: buffer, region,
canvas. This is most of how btprnt works at the core. The
rest of btprnt are drawing routines built on top of that.
At the time of writing, all this amounts to is textboxes.
